import os
import cv2
import numpy as np
from PIL import Image

# Define paths based on the new structure
DATASET_PATH = "asl_dataset"
IMAGES_PATH = "Images"
GIFS_PATH = "Gifs"
AUDIO_PATH = "temp"
VIDEO_PATH = "videos"

# Function to preprocess ASL images
def preprocess_asl_images():
    processed_images = []
    for filename in os.listdir(DATASET_PATH):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            img_path = os.path.join(DATASET_PATH, filename)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            img = cv2.resize(img, (128, 128))
            processed_images.append(img)
    return processed_images

# Function to convert GIFs to a sequence of images
def process_gifs():
    gif_frames = {}
    for gif_name in os.listdir(GIFS_PATH):
        if gif_name.endswith(".gif"):
            gif_path = os.path.join(GIFS_PATH, gif_name)
            gif = Image.open(gif_path)
            frames = []
            while True:
                frame = gif.convert("RGB")
                frames.append(np.array(frame))
                try:
                    gif.seek(gif.tell() + 1)
                except EOFError:
                    break
            gif_frames[gif_name] = frames
    return gif_frames

# Function to preprocess images from "Images" folder
def process_sign_images():
    sign_images = []
    for filename in os.listdir(IMAGES_PATH):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            img_path = os.path.join(IMAGES_PATH, filename)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (128, 128))
            sign_images.append(img)
    return sign_images

if __name__ == "__main__":
    asl_images = preprocess_asl_images()
    gif_data = process_gifs()
    sign_images = process_sign_images()
    print("Preprocessing complete.")
